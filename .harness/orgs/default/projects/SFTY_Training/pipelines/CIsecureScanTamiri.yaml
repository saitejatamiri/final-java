pipeline:
  name: CI-secureScan-Tamiri
  identifier: CIsecureScanTamiri
  projectIdentifier: SFTY_Training
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: GitHubTamirijavarepo
        build: <+input>
  stages:
    - stage:
        name: build-scan
        identifier: buildscan
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - parallel:
                  - step:
                      type: Gitleaks
                      name: Gitleaks_1
                      identifier: Gitleaks_1
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: repository
                          detection: auto
                        advanced:
                          log:
                            level: info
                          args:
                            cli: " gitleaks detect --source . -r gitleaks-report.json json"
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: MarkAsSuccess
                  - step:
                      type: Run
                      name: Run_2
                      identifier: Run_2
                      spec:
                        connectorRef: DockerTamiri
                        image: zricethezav/gitleaks:latest
                        shell: Sh
                        command: |-
                          gitleaks detect \
                                    --source=. \
                                    --report-format=json \
                                    --report-path=/harness/gitleaks-report.json \
                                    --exit-code=0  # Override exit code
              - step:
                  type: Run
                  name: Var_test
                  identifier: Var_test
                  spec:
                    shell: Sh
                    command: |-
                      echo "Account var: "<+variable.account.VARIABLE_NAME>
                      echo "Org var: "<+variable.org.VARIABLE_NAME>
                      echo "Project var: " <+variable.VARIABLE_NAME>
                      echo "Pipeline var: " <+pipeline.variables.VARIABLE_NAME>
                      echo "Stage var: " <+stage.variables.VARIABLE_NAME>
              - step:
                  type: Run
                  name: Run_3
                  identifier: Run_3
                  spec:
                    shell: Sh
                    command: |-
                      ls -a
                      cat gitleaks-report.json
              - step:
                  type: Run
                  name: mvn_build
                  identifier: mvn_build
                  spec:
                    shell: Sh
                    command: |-
                      ls -a
                      mvn clean package
              - step:
                  type: Run
                  name: Run_5
                  identifier: Run_5
                  spec:
                    shell: Sh
                    command: |-
                      JAR_PATH="/harness/target/java-sample-app-1.0.0.jar"
                              
                              if [ -f "$JAR_PATH" ]; then
                                echo "Found JAR at: $JAR_PATH"
                                ls -lh "$JAR_PATH"
                                
                                # Create output directory if missing
                                mkdir -p "$(dirname "${HARNESS_STEP_OUTPUT:-/tmp/harness_output}")"
                                
                                # Write output (fallback to /tmp if needed)
                                OUTPUT_FILE="${HARNESS_STEP_OUTPUT:-/tmp/harness_output}"
                                echo "JAR_PATH=$JAR_PATH" > "$OUTPUT_FILE"
                                echo "Output written to: $OUTPUT_FILE"
                              else
                                echo "Error: JAR not found at $JAR_PATH"
                                echo "Contents of /harness/target:"
                                ls -lh "/harness/target" || true
                                exit 1
                              fi
    - stage:
        name: output
        identifier: output
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    shell: Sh
                    command: |-
                      JAR_PATH=<+pipeline.stages.build.spec.execution.steps.build_jar.output.JAR_PATH>
                              
                              # Debug output
                              echo "=== Artifact Inspection ==="
                              echo "Full JAR Path: $JAR_PATH"
